# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the workflow will run
on:
  # Triggers the workflow on ref creation (branch, tag)
  push:
    tags:
      - v[0-9]+.[0-9]+.?[0-9]?**
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  create_release:
    # The type of runner that the job will run on

    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Give rigths to run a script from repository
        run: chmod +x ./scripts/*

      - name: Get latest release tag
        run: |
          export RELEASE_VERSION=$(./scripts/releaseTag.sh)
          echo "RELEASE_VERSION=$RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

      - name: Get release name
        run: |
          export RELEASE_NAME=$(./scripts/genReleaseName.sh ./config/main.json ${{ env.RELEASE_VERSION }})
          echo "RELEASE_NAME=$RELEASE_NAME"
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Print release version
        run: |
          echo 'Создаем релиз ${{ env.RELEASE_VERSION }}'

      - name: Get previous release tag
        run: |
          export PREV_RELEASE=$(./scripts/prevRelease.sh ${{ env.RELEASE_VERSION }})
          echo "PREV_RELEASE=$PREV_RELEASE"
          echo "PREV_RELEASE=$PREV_RELEASE" >> $GITHUB_ENV

      - name: Print commit messages between previous and current releases
        run: git log --format=%B --no-merges ${{ env.RELEASE_VERSION }}...${{ env.PREV_RELEASE }}

      - name: Generate json payload for creating task request
        run: ./scripts/genCreateTaskJson.sh '${{ env.RELEASE_NAME }}' ./payload.json

      - name: Create Yandex.Tracker release task
        env:
          TOKEN: ${{ secrets.test_token }}
          ORG_ID: ${{ secrets.org_id }}
        run: ./scripts/createTask.sh '${{ env.RELEASE_NAME }}' ./payload.json

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
